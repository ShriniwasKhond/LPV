import numpy as np
from numba import cuda


@cuda.jit
def vector_add(a, b, c):
    tid = cuda.grid(1) # Get the current thread ID
    if tid < len(a): # Ensure the threadID is within the range of the vector
        c[tid] = a[tid] + b[tid] # perform addition element-wise

size = int(input("Enter the size of the vectors: "))

a = np.arange(size) # Create the first input vector
b = 2 * np.arange(size) # Create the second input vector
c = np.zeros(size) # Initialize the result vector with zeros

threads_per_block = 256
blocks_per_grid = (size + threads_per_block - 1) // threads_per_block

# Launch the vector_add kernel with the specified block and grid dimensions
vector_add[blocks_per_grid, threads_per_block](a, b, c)

print("Result vector:")
print(c)